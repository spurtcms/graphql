package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"gqlserver/graph/model"
)

// MemberLogin is the resolver for the memberLogin field.
func (r *mutationResolver) MemberLogin(ctx context.Context, input model.LoginCredentials) (string, error) {
	return MemberLogin(r.DB, input)
}

// MemberRegister is the resolver for the memberRegister field.
func (r *mutationResolver) MemberRegister(ctx context.Context, input model.MemberDetails) (bool, error) {
	return MemberRegister(r.DB, input)
}

// MemberUpdate is the resolver for the memberUpdate field.
func (r *mutationResolver) MemberUpdate(ctx context.Context, memberdata model.MemberDetails) (bool, error) {
	return UpdateMember(r.DB, ctx, memberdata)
}

// UpdateHighlights is the resolver for the updateHighlights field.
func (r *mutationResolver) UpdateHighlights(ctx context.Context, highlights model.Highlights) (bool, error) {
	return UpdateHighlights(r.DB, ctx, highlights)
}

// UpdateNotes is the resolver for the updateNotes field.
func (r *mutationResolver) UpdateNotes(ctx context.Context, pageid int, notes string) (bool, error) {
	return UpdateNotes(r.DB, ctx, pageid, notes)
}

// DeleteNotesOrHighlights is the resolver for the deleteNotesOrHighlights field.
func (r *mutationResolver) DeleteNotesOrHighlights(ctx context.Context, contentID int) (bool, error) {
	return DeleteNotesOrHighlights(r.DB, ctx, contentID)
}

// SendOtpToMail is the resolver for the sendOtpToMail field.
func (r *mutationResolver) SendOtpToMail(ctx context.Context, email string) (bool, error) {
	return SendOtpToMail(r.DB, ctx, email)
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, otp int, newPassword string, email string) (bool, error) {
	return ResetPassword(r.DB, otp, newPassword, email)
}

// Pageslist is the resolver for the pageslist field.
func (r *queryResolver) Pageslist(ctx context.Context, spaceid int) (model.PageAndPagegroups, error) {
	return Pagelist(r.DB, spaceid)
}

// SpacesList is the resolver for the spacesList field.
func (r *queryResolver) SpacesList(ctx context.Context, filter model.Filter) (model.SpacesDetails, error) {
	return Spacelist(r.DB, filter)
}

// PageContent is the resolver for the PageContent field.
func (r *queryResolver) PageContent(ctx context.Context, pageid int) (string, error) {
	return PageContent(r.DB, ctx, pageid)
}

// GetHighlights is the resolver for the getHighlights field.
func (r *queryResolver) GetNotesOrHighlights(ctx context.Context, pageid int, contentType string) ([]model.MemberNotesHighlight, error) {
	return GetNotesOrHighlights(r.DB, ctx, pageid, contentType)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
